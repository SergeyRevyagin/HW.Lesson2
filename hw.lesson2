/*





** Написать метод, в который передается не пустой одномерный целочисленный массив, метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части массива равны. Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true, checkBalance([1, 1, 1, || 2, 1]) → true, граница показана символами ||, эти символы в массив не входят.
**** Написать метод, которому на вход подается одномерный массив и число n (может быть положительным, или отрицательным), при этом метод должен сместить все элементы массива на n позиций. Элементы смещаются циклично. Для усложнения задачи нельзя пользоваться вспомогательными массивами. Примеры: [ 1, 2, 3 ] при n = 1 (на один вправо) -> [ 3, 1, 2 ]; [ 3, 5, 6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ]. При каком n в какую сторону сдвиг можете выбирать сами
 */


import java.util.Arrays;

public class Lesson2 {
    //region Task1
        /*Задать целочисленный массив, состоящий из элементов 0 и 1. Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ].
         С помощью цикла и условия заменить 0 на 1, 1 на 0;
         */

    public static int[] Task1(int[]arr1) {

        for (int i = 0; i < arr1.length; i++)
            if (arr1[i]== 1) {
                arr1[i] = 1;
            } else {
                arr1[i] = 0;
            }
        return arr1;
    }



        //endregion
    //region Task2
    /*
    Задать пустой целочисленный массив размером 8.
     С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21;
     */

    public static int[] Task2(int[]arr2){
        int j = 0;
        for (int i = 0; i < arr2.length ; i++,j+=3) {
            arr2[i] = j;

        }

        return arr2;
    }

    //endregion
    //region Task3
    /*
    Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ]
    пройти по нему циклом, и числа меньшие 6 умножить на 2;
     */

    public static int[] Task3(int[]arr3){
        for (int i = 0; i < arr3.length; i++) {
            if (arr3[i] < 6) {
                arr3[i] *= 3;
            }
        }
        return arr3;
    }

    //endregion
    
   //region Task4
    /*
    Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое),
    и с помощью цикла(-ов) заполнить его диагональные элементы единицами;
     */
    public static int[][] Task4(int[][] arr4) {
        int counter = 0;
        for (int i = 0; i < arr4.length; i++) {
            for (int j = 0; j < arr4[i].length; j++) {
                arr4[i][j] = counter;
                if (arr4[i] == arr4[j] || arr4[i + j] == arr4[arr4.length - 1]) { //тут проблема - не знаю как решить
                    counter = 1;
                } else {
                    counter = 0;
                }
                System.out.print(" " + counter);
            }
            System.out.println();
        }
        return arr4;
    }


    //endregion

    
    //region Task5
    /*
     ** Задать одномерный массив и найти в нем минимальный и максимальный элементы (без помощи интернета);
     */

    public static int[] Task5(int[]arr5){
        int min = 0;
        int max = 0;
        Arrays.sort(arr5);
        System.out.println(Arrays.toString(arr5));
        for (int i = 0; i < arr5.length ; i++) {
            min = arr5[0];
            mam = arr5[arr5.lenght-1];
            }



    }
        System.out.println("min " + min +"\nmax " + max);


        return arr5;
    }
    //endregion
    
    //region Task6
    /*
     ** Написать метод, в который передается не пустой одномерный целочисленный массив,
     *  метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой
     * части массива равны. Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true,
     *  checkBalance([1, 1, 1, || 2, 1]) → true, граница показана символами ||,
     *  эти символы в массив не входят.
     */
    public static boolean Task6(int[] arr6) {
        int summLeft = 0;
        int summRight = 0;
        for (int i = 0; i < arr6.length; i++) {
            summLeft = summLeft + arr6[i];
            for (int j = arr6.length -1; j > arr6[i]; j--) {    // вроде логика верная, но не выдает тру
                summRight = summRight + arr6[j];
                if (summLeft == summRight) {
                    return true;
                }
            }
        }return false;
    }

    //endregion



    public static void main(String[] args) {
        int[] arr1 ={1, 1, 0, 0, 1, 0, 1, 1, 0, 0};
        System.out.println(Arrays.toString(Task1(arr1)));
        int[] arr2 = new int[8];
        System.out.println(Arrays.toString(Task2(arr2)));
        int[] arr3={1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};
        System.out.println(Arrays.toString(Task3(arr3)));
        int[][] arr4 = new int[5][5];
        Task4(arr4);
        int[] arr5 = {2,3,0,-8,10,222,45,5};
        Task5(arr5);
        int[] arr6 ={1,2,3,6};
        Task6(arr6);
        int[] arr7 ={1,2,3,4};
        Task7(arr7,2);



        }





    }
